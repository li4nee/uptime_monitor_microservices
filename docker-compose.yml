services:
  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    networks:
      - internal

  rabbitmq:
    image: rabbitmq:3-management
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 5s
      timeout: 3s
      retries: 5  
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
    networks:
      - internal
  
  redis:
    image: redis:latest
    container_name: redis_uptimemonitor
    restart: always
    volumes:
      - ./redis:/data
    networks:
      - internal
  
  prom-server:
    image: prom/prometheus
    volumes:
      - ./prometheus-config.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - public
      - internal
  
  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prom-server
    networks:
      - public

  loki:
    image: grafana/loki
    ports:
      - "3100:3100"
    networks:
      - public

  api-gateway:
    build: ./API_GATEWAY
    volumes:
      - ./API_GATEWAY:/app
    ports:
      - "4000:4000"
    depends_on:
      - user-service
      - monitor-service
      - worker
    networks:
      - public
      - internal

  user-service:
    build: ./USER_SERVICE
    volumes:
      - ./USER_SERVICE:/app
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - internal

  monitor-service:
    build: ./MONITOR_SERVICE
    volumes:
      - ./MONITOR_SERVICE:/app
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - RABBITMQ_EXCHANGE=${RABBITMQ_EXCHANGE}
      - RABBITMQ_QUEUE_EMAIL=${RABBITMQ_QUEUE_EMAIL}
      - RABBITMQ_ROUTING_KEY_EMAIL=${RABBITMQ_ROUTING_KEY_EMAIL}
      - RABBITMQ_QUEUE_SLACK=${RABBITMQ_QUEUE_SLACK}
      - RABBITMQ_ROUTING_KEY_SLACK=${RABBITMQ_ROUTING_KEY_SLACK}
      - RABBITMQ_QUEUE_DISCORD=${RABBITMQ_QUEUE_DISCORD}
      - RABBITMQ_ROUTING_KEY_DISCORD=${RABBITMQ_ROUTING_KEY_DISCORD}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - internal
      - public

  worker:
    build: ./WORKER
    volumes:
      - ./WORKER:/app
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL}
      - RABBITMQ_EXCHANGE=${RABBITMQ_EXCHANGE}
      - RABBITMQ_QUEUE_EMAIL=${RABBITMQ_QUEUE_EMAIL}
      - RABBITMQ_ROUTING_KEY_EMAIL=${RABBITMQ_ROUTING_KEY_EMAIL}
      - RABBITMQ_QUEUE_SLACK=${RABBITMQ_QUEUE_SLACK}
      - RABBITMQ_ROUTING_KEY_SLACK=${RABBITMQ_ROUTING_KEY_SLACK}
      - RABBITMQ_QUEUE_DISCORD=${RABBITMQ_QUEUE_DISCORD}
      - RABBITMQ_ROUTING_KEY_DISCORD=${RABBITMQ_ROUTING_KEY_DISCORD}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_USER=${MAIL_USER}
      - MAIL_PASS=${MAIL_PASS}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_started
    networks:
      - internal
      - public

volumes:
  pgdata:

networks:
  public:
  internal:
    internal: true
